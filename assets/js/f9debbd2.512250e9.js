"use strict";(self.webpackChunklineage_ai_user_doc=self.webpackChunklineage_ai_user_doc||[]).push([[9511],{4774:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"deploy/start","title":"Deploy on public cloud","description":"You need to get access to our private docker image repository by contacting our team","source":"@site/docs/deploy/start.md","sourceDirName":"deploy","slug":"/deploy/start","permalink":"/lineage-ai-user-doc/docs/deploy/start","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/deploy/start.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"deploySidebar","previous":{"title":"Deployment Overview","permalink":"/lineage-ai-user-doc/docs/deploy/intro"},"next":{"title":"Environment Variables Reference","permalink":"/lineage-ai-user-doc/docs/deploy/env"}}');var l=s(4848),r=s(8453);const c={sidebar_position:2},t="Deploy on public cloud",o={},a=[{value:"Deploy on Azure VMs with GCP Artifact Registry Access",id:"deploy-on-azure-vms-with-gcp-artifact-registry-access",level:2},{value:"1. Set up Azure Virtual Machines",id:"1-set-up-azure-virtual-machines",level:3},{value:"2. Install Dependencies",id:"2-install-dependencies",level:3},{value:"3. Configure GCP Authentication",id:"3-configure-gcp-authentication",level:3},{value:"4. Deploy Containers",id:"4-deploy-containers",level:3},{value:"5. Verify Deployment",id:"5-verify-deployment",level:3},{value:"Deploy on GCP Compute Engine",id:"deploy-on-gcp-compute-engine",level:2},{value:"1. Set up GCP Compute Engine VMs",id:"1-set-up-gcp-compute-engine-vms",level:3},{value:"2. Create Compute Engine Instances",id:"2-create-compute-engine-instances",level:3},{value:"3. Install Dependencies",id:"3-install-dependencies",level:3},{value:"4. Configure Docker Authentication",id:"4-configure-docker-authentication",level:3},{value:"5. Deploy Containers",id:"5-deploy-containers",level:3},{value:"6. Configure Firewall Rules",id:"6-configure-firewall-rules",level:3},{value:"7. Verify Deployment",id:"7-verify-deployment",level:3},{value:"Deploy on AWS EC2",id:"deploy-on-aws-ec2",level:2},{value:"1. Set up AWS EC2 Instances",id:"1-set-up-aws-ec2-instances",level:3},{value:"2. Launch EC2 Instances",id:"2-launch-ec2-instances",level:3},{value:"3. Configure Security Groups",id:"3-configure-security-groups",level:3},{value:"4. Install Dependencies",id:"4-install-dependencies",level:3},{value:"5. Deploy Containers",id:"5-deploy-containers-1",level:3},{value:"6. Verify Deployment",id:"6-verify-deployment",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"deploy-on-public-cloud",children:"Deploy on public cloud"})}),"\n",(0,l.jsxs)(n.admonition,{type:"info",children:[(0,l.jsx)(n.mdxAdmonitionTitle,{}),(0,l.jsx)(n.p,{children:"You need to get access to our private docker image repository by contacting our team\nbefore following the steps."})]}),"\n",(0,l.jsx)(n.h2,{id:"deploy-on-azure-vms-with-gcp-artifact-registry-access",children:"Deploy on Azure VMs with GCP Artifact Registry Access"}),"\n",(0,l.jsx)(n.p,{children:"This section explains how to deploy Lineage AI on Azure VMs"}),"\n",(0,l.jsx)(n.h3,{id:"1-set-up-azure-virtual-machines",children:"1. Set up Azure Virtual Machines"}),"\n",(0,l.jsx)(n.p,{children:"Create three VMs according to the specifications in the deployment overview:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Frontend VM"})," (Standard_D2s_v3):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"2 vCPUs, 8GB RAM"}),"\n",(0,l.jsx)(n.li,{children:"Ubuntu Server 20.04 LTS"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Backend VM"})," (Standard_D2s_v3):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"2 vCPUs, 8GB RAM"}),"\n",(0,l.jsx)(n.li,{children:"Ubuntu Server 20.04 LTS"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"LLM Service VM"})," (NC24ads_A100_v4):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"8+ vCPUs, 100GB+ RAM"}),"\n",(0,l.jsx)(n.li,{children:"Ubuntu Server 20.04 LTS"}),"\n",(0,l.jsx)(n.li,{children:"8x NVIDIA A100 GPUs"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"2-install-dependencies",children:"2. Install Dependencies"}),"\n",(0,l.jsx)(n.p,{children:"On all VMs:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Install Google Cloud SDK\ncurl https://sdk.cloud.google.com | bash\nexec -l $SHELL\ngcloud init\n"})}),"\n",(0,l.jsx)(n.p,{children:"On LLM Service VM, additionally:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Install NVIDIA Container Toolkit\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\nsudo apt-get update && sudo apt-get install -y nvidia-container-toolkit\nsudo systemctl restart docker\n"})}),"\n",(0,l.jsx)(n.h3,{id:"3-configure-gcp-authentication",children:"3. Configure GCP Authentication"}),"\n",(0,l.jsx)(n.p,{children:"On each VM:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Configure Docker with GCP credentials\ngcloud auth configure-docker gcr.io\n"})}),"\n",(0,l.jsx)(n.h3,{id:"4-deploy-containers",children:"4. Deploy Containers"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Frontend (UI) Deployment"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker pull gcr.io/ivory-signer-435502-f9/lineage-frontend:latest\ndocker run -d -p 3000:3000 \\\n  -e NEXT_PUBLIC_API_TOKEN=your_token \\\n  -e NEXT_PUBLIC_API_BASE_URL=http://backend-vm-ip:8081 \\\n  gcr.io/ivory-signer-435502-f9/lineage-frontend:latest\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Backend (LLM API) Deployment"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker pull gcr.io/ivory-signer-435502-f9/lineage-llm:latest\ndocker run -d -p 8081:8081 \\\n  -e FLASK_ENV=production \\\n  -e DB_HOST=your_db_host \\\n  -e DB_PORT=your_db_port \\\n  -e DB_NAME=your_db_name \\\n  -e DB_USER=your_db_user \\\n  -e DB_PASSWORD=your_db_password \\\n  gcr.io/ivory-signer-435502-f9/lineage-llm:latest\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"3",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"LLM Service Deployment"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker pull gcr.io/ivory-signer-435502-f9/lineage-llm-service:latest\ndocker run -d --gpus all -p 8000:8000 \\\n  gcr.io/ivory-signer-435502-f9/lineage-llm-service:latest\n"})}),"\n",(0,l.jsx)(n.h3,{id:"5-verify-deployment",children:"5. Verify Deployment"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Check if containers are running:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker ps\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Test frontend access:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Open browser: ",(0,l.jsx)(n.code,{children:"http://frontend-vm-ip:3000"})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Test backend health:"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"curl http://backend-vm-ip:8081/health\n"})}),"\n",(0,l.jsx)(n.h2,{id:"deploy-on-gcp-compute-engine",children:"Deploy on GCP Compute Engine"}),"\n",(0,l.jsx)(n.h3,{id:"1-set-up-gcp-compute-engine-vms",children:"1. Set up GCP Compute Engine VMs"}),"\n",(0,l.jsx)(n.p,{children:"Create three VMs according to the specifications in the deployment overview:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Frontend VM"})," (e2-standard-2):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"2 vCPUs"}),"\n",(0,l.jsx)(n.li,{children:"8GB RAM"}),"\n",(0,l.jsx)(n.li,{children:"Ubuntu Server 20.04 LTS"}),"\n",(0,l.jsx)(n.li,{children:"10GB boot disk"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Backend VM"})," (e2-standard-2):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"2 vCPUs"}),"\n",(0,l.jsx)(n.li,{children:"8GB RAM"}),"\n",(0,l.jsx)(n.li,{children:"Ubuntu Server 20.04 LTS"}),"\n",(0,l.jsx)(n.li,{children:"10GB boot disk"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"LLM Service VM"})," (a2-highgpu-8g):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"12 vCPUs"}),"\n",(0,l.jsx)(n.li,{children:"85GB RAM"}),"\n",(0,l.jsx)(n.li,{children:"Ubuntu Server 20.04 LTS"}),"\n",(0,l.jsx)(n.li,{children:"200GB boot disk"}),"\n",(0,l.jsx)(n.li,{children:"8x NVIDIA A100 GPUs"}),"\n",(0,l.jsx)(n.li,{children:"GPU memory: 40GB per GPU"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"2-create-compute-engine-instances",children:"2. Create Compute Engine Instances"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Create Frontend VM"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"gcloud compute instances create lineage-frontend \\\n  --machine-type=e2-standard-2 \\\n  --zone=us-central1-a \\\n  --image-family=ubuntu-2004-lts \\\n  --image-project=ubuntu-os-cloud \\\n  --boot-disk-size=10GB \\\n  --service-account=lineage-compute-sa@${PROJECT_ID}.iam.gserviceaccount.com \\\n  --scopes=cloud-platform\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Create Backend VM"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"gcloud compute instances create lineage-backend \\\n  --machine-type=e2-standard-2 \\\n  --zone=us-central1-a \\\n  --image-family=ubuntu-2004-lts \\\n  --image-project=ubuntu-os-cloud \\\n  --boot-disk-size=10GB \\\n  --service-account=lineage-compute-sa@${PROJECT_ID}.iam.gserviceaccount.com \\\n  --scopes=cloud-platform\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"3",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Create LLM Service VM"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'gcloud compute instances create lineage-llm-service \\\n  --machine-type=a2-highgpu-8g \\\n  --zone=us-central1-a \\\n  --image-family=ubuntu-2004-lts \\\n  --image-project=ubuntu-os-cloud \\\n  --boot-disk-size=200GB \\\n  --maintenance-policy=TERMINATE \\\n  --accelerator="type=nvidia-tesla-a100,count=8" \\\n  --metadata="install-nvidia-driver=True" \\\n  --service-account=lineage-compute-sa@${PROJECT_ID}.iam.gserviceaccount.com \\\n  --scopes=cloud-platform\n'})}),"\n",(0,l.jsx)(n.h3,{id:"3-install-dependencies",children:"3. Install Dependencies"}),"\n",(0,l.jsx)(n.p,{children:"Connect to each instance:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"gcloud compute ssh INSTANCE_NAME --zone=us-central1-a\n"})}),"\n",(0,l.jsx)(n.p,{children:"On all instances:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n"})}),"\n",(0,l.jsx)(n.p,{children:"On LLM Service instance, additionally:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Install NVIDIA Container Toolkit\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\nsudo apt-get update && sudo apt-get install -y nvidia-container-toolkit\nsudo systemctl restart docker\n"})}),"\n",(0,l.jsx)(n.h3,{id:"4-configure-docker-authentication",children:"4. Configure Docker Authentication"}),"\n",(0,l.jsx)(n.p,{children:"On each instance:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Configure Docker credential helper\nsudo apt-get install -y google-cloud-sdk-docker-credential-gcr\n\n# Configure Docker\nmkdir -p ~/.docker\necho \'{\n  "credHelpers": {\n    "gcr.io": "gcr"\n  }\n}\' > ~/.docker/config.json\n\n# The service account credentials will be automatically used\n'})}),"\n",(0,l.jsx)(n.h3,{id:"5-deploy-containers",children:"5. Deploy Containers"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Frontend (UI) Deployment"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker pull gcr.io/ivory-signer-435502-f9/lineage-frontend:latest\ndocker run -d -p 3000:3000 \\\n  -e NEXT_PUBLIC_API_TOKEN=your_token \\\n  -e NEXT_PUBLIC_API_BASE_URL=http://BACKEND_INTERNAL_IP:8081 \\\n  gcr.io/ivory-signer-435502-f9/lineage-frontend:latest\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Backend (LLM API) Deployment"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker pull gcr.io/ivory-signer-435502-f9/lineage-llm:latest\ndocker run -d -p 8081:8081 \\\n  -e FLASK_ENV=production \\\n  -e DB_HOST=your_db_host \\\n  -e DB_PORT=your_db_port \\\n  -e DB_NAME=your_db_name \\\n  -e DB_USER=your_db_user \\\n  -e DB_PASSWORD=your_db_password \\\n  gcr.io/ivory-signer-435502-f9/lineage-llm:latest\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"3",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"LLM Service Deployment"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker pull gcr.io/ivory-signer-435502-f9/lineage-llm-service:latest\ndocker run -d --gpus all -p 8000:8000 \\\n  gcr.io/ivory-signer-435502-f9/lineage-llm-service:latest\n"})}),"\n",(0,l.jsx)(n.h3,{id:"6-configure-firewall-rules",children:"6. Configure Firewall Rules"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Allow incoming traffic to frontend\ngcloud compute firewall-rules create allow-frontend \\\n  --allow tcp:3000 \\\n  --target-tags=lineage-frontend\n\n# Allow incoming traffic to backend\ngcloud compute firewall-rules create allow-backend \\\n  --allow tcp:8081 \\\n  --target-tags=lineage-backend\n\n# Allow incoming traffic to LLM service\ngcloud compute firewall-rules create allow-llm-service \\\n  --allow tcp:8000 \\\n  --target-tags=lineage-llm-service\n"})}),"\n",(0,l.jsx)(n.h3,{id:"7-verify-deployment",children:"7. Verify Deployment"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Check container status on each instance:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker ps\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Test frontend access:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Open browser: ",(0,l.jsx)(n.code,{children:"http://FRONTEND_EXTERNAL_IP:3000"})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Test backend health:"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"curl http://BACKEND_EXTERNAL_IP:8081/health\n"})}),"\n",(0,l.jsx)(n.h2,{id:"deploy-on-aws-ec2",children:"Deploy on AWS EC2"}),"\n",(0,l.jsx)(n.h3,{id:"1-set-up-aws-ec2-instances",children:"1. Set up AWS EC2 Instances"}),"\n",(0,l.jsx)(n.p,{children:"Create three instances according to the specifications in the deployment overview:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Frontend Instance"})," (t3.medium):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"2 vCPUs"}),"\n",(0,l.jsx)(n.li,{children:"4GB RAM"}),"\n",(0,l.jsx)(n.li,{children:"Ubuntu Server 20.04 LTS AMI"}),"\n",(0,l.jsx)(n.li,{children:"10GB EBS volume"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Backend Instance"})," (t3.medium):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"2 vCPUs"}),"\n",(0,l.jsx)(n.li,{children:"4GB RAM"}),"\n",(0,l.jsx)(n.li,{children:"Ubuntu Server 20.04 LTS AMI"}),"\n",(0,l.jsx)(n.li,{children:"10GB EBS volume"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"LLM Service Instance"})," (p4d.24xlarge):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"96 vCPUs"}),"\n",(0,l.jsx)(n.li,{children:"1,152GB RAM"}),"\n",(0,l.jsx)(n.li,{children:"Ubuntu Server 20.04 LTS AMI"}),"\n",(0,l.jsx)(n.li,{children:"200GB EBS volume"}),"\n",(0,l.jsx)(n.li,{children:"8x NVIDIA A100 GPUs"}),"\n",(0,l.jsx)(n.li,{children:"GPU memory: 40GB per GPU"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"2-launch-ec2-instances",children:"2. Launch EC2 Instances"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Frontend Instance"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"aws ec2 run-instances \\\n  --image-id ami-0c7217cdde317cfec \\\n  --instance-type t3.medium \\\n  --key-name your-key-pair \\\n  --security-group-ids your-security-group \\\n  --subnet-id your-subnet \\\n  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=lineage-frontend}]' \\\n  --count 1\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Backend Instance"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"aws ec2 run-instances \\\n  --image-id ami-0c7217cdde317cfec \\\n  --instance-type t3.medium \\\n  --key-name your-key-pair \\\n  --security-group-ids your-security-group \\\n  --subnet-id your-subnet \\\n  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=lineage-backend}]' \\\n  --count 1\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"3",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"LLM Service Instance"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"aws ec2 run-instances \\\n  --image-id ami-0c7217cdde317cfec \\\n  --instance-type p4d.24xlarge \\\n  --key-name your-key-pair \\\n  --security-group-ids your-security-group \\\n  --subnet-id your-subnet \\\n  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=lineage-llm}]' \\\n  --count 1\n"})}),"\n",(0,l.jsx)(n.h3,{id:"3-configure-security-groups",children:"3. Configure Security Groups"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Create security group\naws ec2 create-security-group \\\n  --group-name lineage-sg \\\n  --description "Security group for Lineage AI"\n\n# Allow frontend access\naws ec2 authorize-security-group-ingress \\\n  --group-name lineage-sg \\\n  --protocol tcp \\\n  --port 3000 \\\n  --cidr 0.0.0.0/0\n\n# Allow backend access\naws ec2 authorize-security-group-ingress \\\n  --group-name lineage-sg \\\n  --protocol tcp \\\n  --port 8081 \\\n  --cidr 0.0.0.0/0\n\n# Allow LLM service access\naws ec2 authorize-security-group-ingress \\\n  --group-name lineage-sg \\\n  --protocol tcp \\\n  --port 8000 \\\n  --cidr 0.0.0.0/0\n'})}),"\n",(0,l.jsx)(n.h3,{id:"4-install-dependencies",children:"4. Install Dependencies"}),"\n",(0,l.jsx)(n.p,{children:"Connect to each instance:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'ssh -i "your-key.pem" ubuntu@INSTANCE_PUBLIC_DNS\n'})}),"\n",(0,l.jsx)(n.p,{children:"On all instances:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n"})}),"\n",(0,l.jsx)(n.p,{children:"On LLM Service instance:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Install NVIDIA drivers and toolkit\nsudo apt-get update\nsudo apt-get install -y nvidia-driver-470\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\nsudo apt-get update && sudo apt-get install -y nvidia-container-toolkit\nsudo systemctl restart docker\n"})}),"\n",(0,l.jsx)(n.h3,{id:"5-deploy-containers-1",children:"5. Deploy Containers"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Frontend (UI) Deployment"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker pull gcr.io/ivory-signer-435502-f9/lineage-frontend:latest\ndocker run -d -p 3000:3000 \\\n  -e NEXT_PUBLIC_API_TOKEN=your_token \\\n  -e NEXT_PUBLIC_API_BASE_URL=http://BACKEND_PRIVATE_IP:8081 \\\n  gcr.io/ivory-signer-435502-f9/lineage-frontend:latest\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Backend (LLM API) Deployment"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker pull gcr.io/ivory-signer-435502-f9/lineage-llm:latest\ndocker run -d -p 8081:8081 \\\n  -e FLASK_ENV=production \\\n  -e DB_HOST=your_db_host \\\n  -e DB_PORT=your_db_port \\\n  -e DB_NAME=your_db_name \\\n  -e DB_USER=your_db_user \\\n  -e DB_PASSWORD=your_db_password \\\n  gcr.io/ivory-signer-435502-f9/lineage-llm:latest\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"3",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"LLM Service Deployment"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker pull gcr.io/ivory-signer-435502-f9/lineage-llm-service:latest\ndocker run -d --gpus all -p 8000:8000 \\\n  gcr.io/ivory-signer-435502-f9/lineage-llm-service:latest\n"})}),"\n",(0,l.jsx)(n.h3,{id:"6-verify-deployment",children:"6. Verify Deployment"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Check container status:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker ps\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Test frontend access:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Open browser: ",(0,l.jsx)(n.code,{children:"http://FRONTEND_PUBLIC_DNS:3000"})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Test backend health:"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"curl http://BACKEND_PUBLIC_DNS:8081/health\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>t});var i=s(6540);const l={},r=i.createContext(l);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);